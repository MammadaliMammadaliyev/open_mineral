stages:
  - test
  - security
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  POSTGRES_DB: test_open_mineral
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://redis:6379/0

services:
  - postgres:15
  - redis:7

before_script:
  - apt-get update -qq && apt-get install -y -qq git curl
  - python --version
  - pip install --upgrade pip
  - pip install -r requirements.txt

test:lint:
  stage: test
  script:
    - pip install flake8 black isort
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - black --check .
    - isort --check-only .
  only:
    - merge_requests
    - main
    - develop

test:unit:
  stage: test
  script:
    - cd bc
    - python manage.py migrate
    - python manage.py test --verbosity=2
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: bc/coverage.xml
    paths:
      - bc/coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test:integration:
  stage: test
  script:
    - cd bc
    - python manage.py migrate
    - python manage.py test --verbosity=2 --settings=bc.settings_test
  only:
    - merge_requests
    - main
    - develop

security:scan:
  stage: security
  script:
    - pip install safety bandit
    - safety check
    - bandit -r bc/ -f json -o bandit-report.json
  artifacts:
    reports:
      security: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - curl -X POST -H "Content-Type: application/json" -d '{"text":"Deploying to staging"}' $STAGING_WEBHOOK_URL
  environment:
    name: staging
    url: https://staging.open-mineral.com
  only:
    - develop
  when: manual

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - curl -X POST -H "Content-Type: application/json" -d '{"text":"Deploying to production"}' $PRODUCTION_WEBHOOK_URL
  environment:
    name: production
    url: https://open-mineral.com
  only:
    - main
  when: manual

cleanup:
  stage: deploy
  script:
    - docker system prune -f
  when: always
